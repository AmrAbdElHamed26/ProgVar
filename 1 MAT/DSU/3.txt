ecpc 2015
#include<bits/stdc++.h>
using namespace std;

#define endl "\n" ;
#define sort(v) sort(v.begin() , v.end());
#define reverse(v) reverse(v.begin() , v.end());
typedef pair<long long, long long > ii;
typedef vector<long long > vl;
typedef vector<int>vi ;
typedef vector<ii> vii;
typedef long long ll;
typedef  long double ld;

const int  N = 100000  + 5;
ll  oo = 10000000;
ll const MOD = 1e9 + 7;


/*

int dx [] = {-1, -1, -1, 0, 1, 1, 1, 0};
int dy[] = {-1, 0, 1, 1, 1, 0, -1, -1};
*/

int dx[] = { 0, 1, -1,0 };
int dy[] = { 1,0 , 0,-1 };

struct  DSU {

    vector<ll> par , size , Time;
    DSU(int n){
        par.resize(n); size.resize(n , 1);
        Time.resize(n);
        for (int i = 0 ; i < n ; i ++ )par[i]=i;
    }
    int getParent(int node){
        while(node != par[node]) node = par[node];
        return node;
    }

    int isParent(int x, int y ){
        while(x != par[x] && par[x]!=y) x = par[x];
        return  x ;
    }

    void merge (int x , int y , int  t){
        x = getParent(x);
        y = getParent(y);

        if(x == y )return;
        if(size[x]> size[y])swap(x,y);

        size[y]+= size[x];
        par[x] = y ;
        Time[x] = t ;

    }


    ll query(int x , int y ){
        if(getParent(x) != getParent(y))return -1;

        int c1 = isParent(x,y);
        if(par[c1] == y)return Time[c1];

        int c2 = isParent(y,x);
        if(par[c2] == x)return Time[c2];

        while(x != par[x]){
            int c3 = isParent(y,par[x]);
            if(par[c3] == par[x] )return max(Time[x] , Time[c3]);
            x = par[x];
        }
        return 0 ;
    }
};

void solve(){

    int n , m ; cin >> n >> m ;

    DSU dsu(n+5);
    for (int i = 1 ; i <= m ; i ++ ){
        int c ; cin >> c;
        int x , y ; cin >> x >> y ;

        if(c == 1){
                dsu.merge(x,y , i );
        }
        else {
            cout << dsu.query(x,y) << endl;
        }


    }


}
int main() {

    ios_base::sync_with_stdio(false);
    cin.tie(NULL);




    int t = 1 ;
    cin>>t ;
    while(t--){
        
        solve();
    }



    return 0;


}

